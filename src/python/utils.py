from typing import List
from typing import Dict, Tuple

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Utility functions
"""


def get_barcodes(whitelist_file: str) -> List[List[str], List[str], List[str]]:
    """
    Read barcode sequences from a whitelist file and return them as lists.

    Args:
        whitelist_file (str): The path to the whitelist file.

    Returns:
        list: A list containing three sublists, each containing the barcode sequences for a specific round.
    """
    r1_barcodes = set()
    r2_barcodes = set()
    r3_barcodes = set()
    with open(whitelist_file) as f:
        for line in f:
            r1_barcodes.add(line[:8])
            r2_barcodes.add(line[8:16])
            r3_barcodes.add(line[16:24])

    return [list(r1_barcodes), list(r2_barcodes), list(r3_barcodes)]


def check_putative_barcode(barcode_str: str, barcode_correction_dict: Dict[str, Tuple[str, str]]) -> Tuple[str, str]:
    """
    Check the putative barcode for exact match, 1 mismatch.

    Args:
        barcode_str (str): The putative barcode string to be checked.
        barcode_correction_dict (dict): A dictionary containing the barcode correction information.

    Returns:
        tuple: A tuple containing the corrected barcode and the correction information. If the barcode is not found, returns (None, None).
    """
    not_found = (None, None)
    return barcode_correction_dict.get(barcode_str, not_found)


def _generate_barcode_variants(input_barcode: str) -> List[str]:
    """
    Generate variants of a given barcode by substituting each base with all possible bases.

    Args:
        input_barcode (str): The input barcode for which variants need to be generated.

    Returns:
        list: A list of barcode variants generated by substituting each base with all possible bases.
    """
    bases = ['A', 'C', 'G', 'T']
    result = []
    for i in range(len(input_barcode)):
        for base in bases:
            if base != input_barcode[i]:
                result.append(input_barcode[:i] + base + input_barcode[i+1:])
    return result


def create_barcode_dicts(barcode_list: List[str]) -> Tuple[Dict[str, str], Dict[str, str]]:
    """
    Creates dictionaries containing exact match and 1-mismatch sequences

    Args:
        barcode_list (list): A list of barcode sequences.

    Returns:
        tuple: A tuple containing two dictionaries. The first dictionary contains exact match sequences,
               where the barcode sequence is the key and the value is the same barcode sequence. The second
               dictionary contains 1-mismatch sequences, where the mismatch sequence is the key and the value
               is the corresponding barcode sequence from the barcode_list.
    """
    barcode_correction_dict = dict()
    for barcode in barcode_list:
        barcode_correction_dict[barcode] = (barcode, "E")  # exact match
        variants = _generate_barcode_variants(barcode)  # generate all variants
        for variant in variants:
            barcode_correction_dict[variant] = (barcode, "M")  # 1 mismatch
    return barcode_correction_dict


def create_barcode_dicts_from_file(barcode_file: str) -> List[Dict[str, str]]:
    """
    Read barcode sequences from a file and create dictionaries containing exact match and 1-mismatch sequences.

    Args:
        barcode_file (str): The path to the barcode file.

    Returns:
        list: A list of dictionaries. Each dictionary contains the barcode correction information for a specific round.
    """
    barcode_lists_per_round = get_barcodes(barcode_file)
    return list(map(create_barcode_dicts, barcode_lists_per_round))
